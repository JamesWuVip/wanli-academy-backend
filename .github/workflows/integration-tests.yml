# .github/workflows/integration-tests.yml

name: Integration Tests

on:
  push:
    branches: [ main, sprint*, develop ]
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ main, sprint*, develop ]
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test Environment'
        required: false
        default: 'ci'
        type: choice
        options:
          - ci
          - staging
      skip_build:
        description: 'Skip build step'
        required: false
        default: false
        type: boolean

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  MAVEN_OPTS: '-Xmx1024m'
  SPRING_PROFILES_ACTIVE: integration

jobs:
  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: wanli_academy_test
          POSTGRES_USER: wanli_test
          POSTGRES_PASSWORD: test_password_123
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Verify Java and Maven installation
        run: |
          java -version
          mvn -version
          echo "JAVA_HOME: $JAVA_HOME"
      
      - name: Clean and compile
        run: |
          mvn clean compile -DskipTests
        timeout-minutes: 10
      
      - name: Run unit tests
        run: |
          mvn test -Dspring.profiles.active=test
        timeout-minutes: 15
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wanli_academy_test
          DB_USER: wanli_test
          DB_PASSWORD: test_password_123
      
      - name: Package application
        run: |
          mvn package -DskipTests
        timeout-minutes: 10
      
      - name: Install Node.js dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "No package.json found, skipping npm install"
          fi
      
      - name: Wait for database to be ready
        run: |
          echo "等待数据库启动..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U wanli_test; then
              echo "数据库已就绪"
              break
            fi
            echo "等待数据库启动... ($i/30)"
            sleep 2
          done
      
      - name: Setup test database
        run: |
          echo "设置测试数据库..."
          PGPASSWORD=test_password_123 psql -h localhost -U wanli_test -d wanli_academy_test -c "SELECT version();"
          echo "数据库连接成功"
        env:
          PGPASSWORD: test_password_123
      
      - name: Import test data
        run: |
          echo "导入测试数据..."
          if [ -f integration-tests/test-data/users_test_data.sql ]; then
            PGPASSWORD=test_password_123 psql -h localhost -U wanli_test -d wanli_academy_test -f integration-tests/test-data/users_test_data.sql
          fi
          if [ -f integration-tests/test-data/roles_test_data.sql ]; then
            PGPASSWORD=test_password_123 psql -h localhost -U wanli_test -d wanli_academy_test -f integration-tests/test-data/roles_test_data.sql
          fi
          if [ -f integration-tests/test-data/assignments_test_data.sql ]; then
            PGPASSWORD=test_password_123 psql -h localhost -U wanli_test -d wanli_academy_test -f integration-tests/test-data/assignments_test_data.sql
          fi
          if [ -f integration-tests/test-data/submissions_test_data.sql ]; then
            PGPASSWORD=test_password_123 psql -h localhost -U wanli_test -d wanli_academy_test -f integration-tests/test-data/submissions_test_data.sql
          fi
          echo "测试数据导入完成"
        env:
          PGPASSWORD: test_password_123
      
      - name: Start Spring Boot application
        run: |
          echo "启动Spring Boot应用..."
          nohup java -jar target/*.jar --spring.profiles.active=integration > app.log 2>&1 &
          echo $! > app.pid
          echo "应用启动中..."
          sleep 30
          echo "检查应用状态..."
          if ps -p $(cat app.pid) > /dev/null; then
            echo "应用正在运行"
            curl -f http://localhost:8080/actuator/health || echo "健康检查失败"
          else
            echo "应用启动失败"
            cat app.log
            exit 1
          fi
        timeout-minutes: 5
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wanli_academy_test
          DB_USER: wanli_test
          DB_PASSWORD: test_password_123
      
      - name: Run integration tests
        run: |
          echo "🧪 运行集成测试..."
          if [ -f integration-tests/sprint4_acceptance_test.js ]; then
            node integration-tests/sprint4_acceptance_test.js
          else
            echo "未找到集成测试文件"
          fi
        timeout-minutes: 15
        env:
          BASE_URL: http://localhost:8080
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wanli_academy_test
          DB_USER: wanli_test
          DB_PASSWORD: test_password_123
      
      - name: Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi
      
      - name: Collect logs
        if: always()
        run: |
          echo "收集应用日志..."
          mkdir -p test-reports
          if [ -f app.log ]; then
            cp app.log test-reports/
          fi
          if [ -f integration-tests/logs/integration-tests.log ]; then
            cp integration-tests/logs/integration-tests.log test-reports/
          fi
          if [ -f integration-tests/reports/sprint4-acceptance-report.json ]; then
            cp integration-tests/reports/sprint4-acceptance-report.json test-reports/
          fi
      
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports-${{ github.run_number }}
          path: test-reports/
          retention-days: 30
      
      - name: Test Summary
        if: always()
        run: |
          echo "## 🧪 集成测试总结" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **测试环境**: ${{ inputs.test_environment || 'ci' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Java版本**: ${{ env.JAVA_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **数据库**: PostgreSQL ${{ env.POSTGRES_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **运行时间**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f test-reports/sprint4-acceptance-report.json ]; then
            echo "### 📊 测试结果" >> $GITHUB_STEP_SUMMARY
            echo "详细测试报告已上传到构建产物中" >> $GITHUB_STEP_SUMMARY
          fi

  # 性能测试作业（可选）
  performance_tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration_tests
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'performance')
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: wanli_academy_perf
          POSTGRES_USER: wanli_perf
          POSTGRES_PASSWORD: perf_password_123
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install performance testing tools
        run: |
          npm install -g artillery
          npm install -g clinic
      
      - name: Setup performance test data
        run: |
          # 创建大量测试数据用于性能测试
          echo "准备性能测试数据..."
          # 这里可以添加创建大量测试数据的脚本
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wanli_academy_perf
          DB_USER: wanli_perf
          DB_PASSWORD: perf_password_123
      
      - name: Run performance tests
        run: |
          echo "🚀 执行性能测试..."
          # 这里可以添加性能测试脚本
          echo "性能测试完成"
        timeout-minutes: 15
      
      - name: Upload performance reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-reports-${{ github.run_number }}
          path: performance-reports/
          retention-days: 30