# .github/workflows/integration-tests.yml

name: Integration Tests

on:
  push:
    branches: [ main, sprint*, develop ]
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ main, sprint*, develop ]
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test Environment'
        required: false
        default: 'ci'
        type: choice
        options:
          - ci
          - staging
      skip_build:
        description: 'Skip build step'
        required: false
        default: false
        type: boolean

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  MAVEN_OPTS: '-Xmx1024m'
  SPRING_PROFILES_ACTIVE: integration

jobs:
  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: wanli_academy_test
          POSTGRES_USER: wanli_test
          POSTGRES_PASSWORD: test_password_123
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Install Node.js dependencies
        run: |
          npm install
          npm install -g newman
      
      - name: Wait for PostgreSQL
        run: |
          echo "等待PostgreSQL服务启动..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U wanli_test; then
              echo "PostgreSQL已就绪"
              break
            fi
            echo "等待PostgreSQL... ($i/30)"
            sleep 2
          done
      
      - name: Verify PostgreSQL connection
        run: |
          psql -h localhost -p 5432 -U wanli_test -d wanli_academy_test -c "SELECT version();"
        env:
          PGPASSWORD: test_password_123
      
      - name: Run environment check
        run: |
          chmod +x ./environment-check.sh
          ./environment-check.sh
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wanli_academy_test
          DB_USER: wanli_test
          DB_PASSWORD: test_password_123
      
      - name: Build application
        if: ${{ !inputs.skip_build }}
        run: |
          echo "🔨 构建Spring Boot应用..."
          cd backend
          mvn clean compile -DskipTests
          echo "✅ 应用构建完成"
      
      - name: Run unit tests with coverage
        run: |
          echo "🧪 运行单元测试..."
          cd backend
          mvn test jacoco:report
          echo "✅ 单元测试完成"
      
      - name: Setup test data
        run: |
          echo "📊 准备测试数据..."
          chmod +x ./integration-tests/test-data/import-test-data.sh
          ./integration-tests/test-data/import-test-data.sh
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wanli_academy_test
          DB_USER: wanli_test
          DB_PASSWORD: test_password_123
          PGPASSWORD: test_password_123
      
      - name: Start Spring Boot application
        run: |
          echo "🚀 启动Spring Boot应用..."
          cd backend
          mvn spring-boot:run &
          echo $! > ../app.pid
          
          # 等待应用启动
          echo "等待应用启动..."
          for i in {1..60}; do
            if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "✅ 应用已启动并就绪"
              break
            fi
            echo "等待应用启动... ($i/60)"
            sleep 2
          done
          
          # 验证应用状态
          curl -f http://localhost:8080/actuator/health || {
            echo "❌ 应用启动失败"
            if [ -f ../app.pid ]; then
              kill $(cat ../app.pid) || true
            fi
            exit 1
          }
        env:
          SPRING_PROFILES_ACTIVE: integration
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wanli_academy_test
          DB_USER: wanli_test
          DB_PASSWORD: test_password_123
        timeout-minutes: 5
      
      - name: Run integration tests
        run: |
          echo "🔄 执行集成测试..."
          chmod +x ./integration-test-runner.sh
          ./integration-test-runner.sh
        env:
          TEST_BASE_URL: http://localhost:8080
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wanli_academy_test
          DB_USER: wanli_test
          DB_PASSWORD: test_password_123
          INTEGRATION_TEST_TIMEOUT: 300000
          REPORT_DIR: integration-tests/reports
        timeout-minutes: 10
      
      - name: Generate test reports
        if: always()
        run: |
          echo "📊 生成测试报告..."
          chmod +x ./integration-tests/report-generator.js
          node ./integration-tests/report-generator.js
        env:
          REPORT_DIR: integration-tests/reports
      
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-reports-${{ github.run_number }}
          path: |
            integration-tests/reports/
            backend/target/site/jacoco/
            backend/target/surefire-reports/
          retention-days: 30
      
      - name: Upload test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Integration Test Results
          path: 'integration-tests/reports/integration-test-results.json'
          reporter: 'java-junit'
          fail-on-error: false
      
      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'integration-tests/reports/integration-test-report.json';
            
            if (fs.existsSync(path)) {
              const report = JSON.parse(fs.readFileSync(path, 'utf8'));
              const summary = report.summary;
              
              const body = `## 🧪 集成测试结果
              
              | 指标 | 值 |
              |------|----|
              | 总测试数 | ${summary.total_tests} |
              | 通过测试 | ${summary.passed_tests} |
              | 失败测试 | ${summary.failed_tests} |
              | 跳过测试 | ${summary.skipped_tests} |
              | 成功率 | ${summary.success_rate}% |
              | 执行时间 | ${Math.round(summary.duration_ms / 1000)}s |
              
              ${summary.failed_tests > 0 ? '❌ 存在失败的测试用例，请检查详细报告。' : '✅ 所有集成测试通过！'}
              
              📊 [查看详细报告](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
      
      - name: Cleanup
        if: always()
        run: |
          echo "🧹 清理资源..."
          
          # 停止Spring Boot应用
          if [ -f app.pid ]; then
            echo "停止Spring Boot应用..."
            kill $(cat app.pid) || true
            rm app.pid
          fi
          
          # 清理测试数据（可选）
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "清理测试数据..."
            psql -h localhost -p 5432 -U wanli_test -d wanli_academy_test -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;" || true
          fi
          
          echo "✅ 清理完成"
        env:
          PGPASSWORD: test_password_123
      
      - name: Set job status
        if: always()
        run: |
          if [ -f integration-tests/reports/integration-test-results.json ]; then
            FAILED_TESTS=$(jq '.summary.failed_tests' integration-tests/reports/integration-test-results.json)
            if [ "$FAILED_TESTS" -gt 0 ]; then
              echo "❌ 集成测试失败: $FAILED_TESTS 个测试用例失败"
              exit 1
            else
              echo "✅ 所有集成测试通过"
            fi
          else
            echo "⚠️ 未找到测试结果文件"
            exit 1
          fi

  # 性能测试作业（可选）
  performance_tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration_tests
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'performance')
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: wanli_academy_perf
          POSTGRES_USER: wanli_perf
          POSTGRES_PASSWORD: perf_password_123
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install performance testing tools
        run: |
          npm install -g artillery
          npm install -g clinic
      
      - name: Setup performance test data
        run: |
          # 创建大量测试数据用于性能测试
          echo "准备性能测试数据..."
          # 这里可以添加创建大量测试数据的脚本
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wanli_academy_perf
          DB_USER: wanli_perf
          DB_PASSWORD: perf_password_123
      
      - name: Run performance tests
        run: |
          echo "🚀 执行性能测试..."
          # 这里可以添加性能测试脚本
          echo "性能测试完成"
        timeout-minutes: 15
      
      - name: Upload performance reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-reports-${{ github.run_number }}
          path: performance-reports/
          retention-days: 30