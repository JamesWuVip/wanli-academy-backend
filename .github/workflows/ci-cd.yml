# .github/workflows/ci-cd.yml

name: CI, Quality Scan & CD

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build_and_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze with Maven & SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=JamesWuVip_wanliRepo
      
      # 添加Node.js环境设置用于运行验收测试
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      # 安装npm依赖
      - name: Install npm dependencies
        run: npm install
      
      # 启动后端服务进行验收测试
      - name: Start backend for acceptance tests
        run: |
          cd backend
          mvn spring-boot:run &
          echo $! > ../backend.pid
          sleep 30
        env:
          SPRING_PROFILES_ACTIVE: test
      
      # 运行验收测试
      - name: Run acceptance tests
        run: |
          npm test
        env:
          TEST_BASE_URL: http://localhost:8080/api
        timeout-minutes: 5
      
      # 清理后端进程
      - name: Stop backend
        if: always()
        run: |
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
            rm backend.pid
          fi

  deploy:
    needs: build_and_scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy to Staging on Fly.io
        run: flyctl deploy --remote-only --app wanli-staging
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}